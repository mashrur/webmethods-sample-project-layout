/*
* Copyright © 2010 - 2013 Apama Ltd.
* Copyright © 2013 - 2018 Software AG, Darmstadt, Germany and/or its licensors
*
* SPDX-License-Identifier: Apache-2.0
*
*   Licensed under the Apache License, Version 2.0 (the "License");
*   you may not use this file except in compliance with the License.
*   You may obtain a copy of the License at
*
*       http://www.apache.org/licenses/LICENSE-2.0
*
*   Unless required by applicable law or agreed to in writing, software
*   distributed under the License is distributed on an "AS IS" BASIS,
*   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*   See the License for the specific language governing permissions and
*   limitations under the License.                                                            
*
*/

pipeline {
    agent any 
    
    environment {
		// currentDir can be set to specific dir for non github testing 
		currentDir = "."
		artifactoryServerName = "admin-artifactory"
		artifactoryFileSpecName = "${env.JOB_NAME}.${env.BUILD_NUMBER}.filespec.json"
		artifactoryUploadFileSpecName = "upload.${artifactoryFileSpecName}"
		artifactoryDownloadFileSpecName = "download.${artifactoryFileSpecName}"		
		fbrType = "artifactory"
		cmd = "${env.SAG_HOME}/common/lib/ant/bin/ant -DSAGHome=${env.SAG_HOME} -DSAG_CI_HOME=${env.SAG_CI_HOME} -DprojectName=${env.JOB_NAME} -Dconfig.build.fbr.type=${fbrType}"
	}
	
    stages {
        stage('Build'){
            steps {
	        /*script {
		   def workspace = pwd()
                   echo workspace 
		   env.getEnvironment().each { name, value -> println "Name: $name -> Value $value" }
		}*/
	        bat "${cmd} build"
            }
        }
        stage('Deploy') {
            steps {
		bat "${cmd} deploy"
            }
        }
 	stage('Test') {
            steps {
		bat "${cmd} test"
		junit 'report/'
            }
        }
	stage('Publish') {
			steps {
				echo "Publish stage"
				script {
				        artifactoryZipName = "${env.JOB_NAME}-${env.BUILD_NUMBER}.zip"
				        zip zipFile: "${artifactoryZipName}"
					echo 'zip file: ${artifactoryZipName}'
				        def uploadSpec = """{
                                         "files": [
                                            {
                                              "pattern": "${artifactoryZipName}",
                                              "target": "libs-release-local/${env.JOB_NAME}/${env.BUILD_NUMBER}/"
                                            }
                                          ]
                                        }"""
					def server = Artifactory.server "${artifactoryServerName}"
					def buildInfo = Artifactory.newBuildInfo()
					buildInfo.env.capture = true
					buildInfo.env.collect()
					// Upload to Artifactory.
					server.upload spec: uploadSpec, buildInfo: buildInfo
					server.publishBuildInfo buildInfo
				}
			}
		}
	  stage ('clean') {
	        steps {
		    cleanWs()
		}
	  }
    }
}
